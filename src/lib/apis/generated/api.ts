/* tslint:disable */
/* eslint-disable */
/**
 * hackathon 24spring 19
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface EnterRoom
 */
export interface EnterRoom {
    /**
     * ユーザ名
     * @type {string}
     * @memberof EnterRoom
     */
    'userName': string;
    /**
     * 非公開の場合のパスワード
     * @type {string}
     * @memberof EnterRoom
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface EnterRoomSuccess
 */
export interface EnterRoomSuccess {
    /**
     * ユーザーID
     * @type {string}
     * @memberof EnterRoomSuccess
     */
    'userId': string;
    /**
     * ユーザー名
     * @type {string}
     * @memberof EnterRoomSuccess
     */
    'userName': string;
}
/**
 * 
 * @export
 * @interface GetRooms
 */
export interface GetRooms {
    /**
     * 
     * @type {Array<Room>}
     * @memberof GetRooms
     */
    'rooms': Array<Room>;
    /**
     * 
     * @type {boolean}
     * @memberof GetRooms
     */
    'hasNext': boolean;
}
/**
 * 
 * @export
 * @interface PostRoom
 */
export interface PostRoom {
    /**
     * 部屋の種類(公開か非公開か)
     * @type {boolean}
     * @memberof PostRoom
     */
    'isPublic': boolean;
    /**
     * 部屋名
     * @type {string}
     * @memberof PostRoom
     */
    'roomName': string;
    /**
     * 非公開の場合のパスワード
     * @type {string}
     * @memberof PostRoom
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface PostRoomSuccess
 */
export interface PostRoomSuccess {
    /**
     * 部屋ID
     * @type {string}
     * @memberof PostRoomSuccess
     */
    'roomId': string;
    /**
     * 部屋名
     * @type {string}
     * @memberof PostRoomSuccess
     */
    'roomName': string;
}
/**
 * 
 * @export
 * @interface Room
 */
export interface Room {
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'roomId': string;
    /**
     * 
     * @type {string}
     * @memberof Room
     */
    'roomName': string;
    /**
     * 
     * @type {boolean}
     * @memberof Room
     */
    'isPublic': boolean;
    /**
     * 部屋に入っている人数
     * @type {number}
     * @memberof Room
     */
    'userCount': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 部屋を作成
         * @param {PostRoom} postRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost: async (postRoom: PostRoom, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRoom' is not null or undefined
            assertParamExists('apiRoomPost', 'postRoom', postRoom)
            const localVarPath = `/api/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRoom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 部屋に入る
         * @param {string} roomId 
         * @param {EnterRoom} enterRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomRoomIdEnterPost: async (roomId: string, enterRoom: EnterRoom, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('apiRoomRoomIdEnterPost', 'roomId', roomId)
            // verify required parameter 'enterRoom' is not null or undefined
            assertParamExists('apiRoomRoomIdEnterPost', 'enterRoom', enterRoom)
            const localVarPath = `/api/room/{roomId}/enter`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(enterRoom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 全ての部屋一覧を取得
         * @param {number} [limit] 何件取得するか
         * @param {number} [offset] 何件目から取得するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomsGet: async (limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rooms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary WebSocket接続
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWsRoomIdGet: async (roomId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('apiWsRoomIdGet', 'roomId', roomId)
            const localVarPath = `/api/ws/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 部屋を作成
         * @param {PostRoom} postRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomPost(postRoom: PostRoom, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostRoomSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomPost(postRoom, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiRoomPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 部屋に入る
         * @param {string} roomId 
         * @param {EnterRoom} enterRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomRoomIdEnterPost(roomId: string, enterRoom: EnterRoom, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnterRoomSuccess>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomRoomIdEnterPost(roomId, enterRoom, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiRoomRoomIdEnterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 全ての部屋一覧を取得
         * @param {number} [limit] 何件取得するか
         * @param {number} [offset] 何件目から取得するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRoomsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRooms>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRoomsGet(limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiRoomsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary WebSocket接続
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiWsRoomIdGet(roomId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiWsRoomIdGet(roomId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.apiWsRoomIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 部屋を作成
         * @param {PostRoom} postRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomPost(postRoom: PostRoom, options?: any): AxiosPromise<PostRoomSuccess> {
            return localVarFp.apiRoomPost(postRoom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 部屋に入る
         * @param {string} roomId 
         * @param {EnterRoom} enterRoom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomRoomIdEnterPost(roomId: string, enterRoom: EnterRoom, options?: any): AxiosPromise<EnterRoomSuccess> {
            return localVarFp.apiRoomRoomIdEnterPost(roomId, enterRoom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 全ての部屋一覧を取得
         * @param {number} [limit] 何件取得するか
         * @param {number} [offset] 何件目から取得するか
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRoomsGet(limit?: number, offset?: number, options?: any): AxiosPromise<GetRooms> {
            return localVarFp.apiRoomsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary WebSocket接続
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiWsRoomIdGet(roomId: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiWsRoomIdGet(roomId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 部屋を作成
     * @param {PostRoom} postRoom 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiRoomPost(postRoom: PostRoom, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiRoomPost(postRoom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 部屋に入る
     * @param {string} roomId 
     * @param {EnterRoom} enterRoom 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiRoomRoomIdEnterPost(roomId: string, enterRoom: EnterRoom, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiRoomRoomIdEnterPost(roomId, enterRoom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 全ての部屋一覧を取得
     * @param {number} [limit] 何件取得するか
     * @param {number} [offset] 何件目から取得するか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiRoomsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiRoomsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary WebSocket接続
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiWsRoomIdGet(roomId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiWsRoomIdGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }
}

export class Apis extends BaseAPI {
    /**
     *
     * @summary 部屋を作成
     * @param {PostRoom} postRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiRoomPost(postRoom: PostRoom, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiRoomPost(postRoom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 部屋に入る
     * @param {string} roomId
     * @param {EnterRoom} enterRoom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiRoomRoomIdEnterPost(roomId: string, enterRoom: EnterRoom, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiRoomRoomIdEnterPost(roomId, enterRoom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary 全ての部屋一覧を取得
     * @param {number} [limit] 何件取得するか
     * @param {number} [offset] 何件目から取得するか
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiRoomsGet(limit?: number, offset?: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiRoomsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary WebSocket接続
     * @param {string} roomId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiWsRoomIdGet(roomId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiWsRoomIdGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }
}
